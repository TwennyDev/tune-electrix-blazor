
@using TuneLabProject.Shared.SharedModels

<tr>
    <td>@Product.ProductId</td>
    <td class="col-sm-8 col-md-6">
        <div class="media">
            <img class="media-object" src="@ImageSrc" style="width: 72px; max-height:50px; object-fit:cover; margin-right:15px;">
            <div class="media-body">
                <h4 class="media-heading"><NavLink href="@DetailLink">@Product.ProductName</NavLink></h4>
                <h5 class="media-heading"> Category <span class="text-info">@Product.ProductCategory.CategoryName</span></h5>
                <span>Type: </span>

                @if (Product.IsPhysical)
                {
                    <span class="text-info"><strong>Physical Item</strong></span>
                }
                else
                {
                    <span class="text-warning"><strong>Digital Item</strong></span>
                }

            </div>
        </div>
    </td>
    <td class="col-sm-1 col-md-1" style="text-align: center">
        <input type="number" min="@Minimum" max="@(Product.StockLevel)" class="form-control" @bind="Quantity">
    </td>
    <td class="col-sm-1 col-md-1 text-center"><strong>$@(Math.Round(Product.CurrentPrice, 2))</strong></td>
    <td class="col-sm-1 col-md-1 text-center"><strong>$@LineTotal</strong></td>
    <td class="col-sm-1 col-md-1">
        <button type="button" class="btn btn-danger" @onclick="RemoveItem">Remove</button>
    </td>
</tr>

@code {  

    //SS 27/3 This action/delegate is used for holding a reference to the parent component's OnLineItemUpdated method
    [Parameter]
    public Action<int, int> LineItemUpdated { get; set; }

    //SS 27/3 The product object associated with this line item
    [Parameter]
    public Product Product { get; set; }

    //SS 27/3 The quantity of this line item.
    //The setter validates the quantity, updates the line total and invokes the LineItemUpdated delegate
    private int quantity;
    [Parameter]
    public int Quantity
    {
        get => quantity;

        set
        {

            if(Product.StockLevel == 0)
            {
                quantity = 0;
            }
            else
            {
                if (value < 1) quantity = 1;
                else if (value > Product.StockLevel) quantity = Product.StockLevel;
                else quantity = value;
            }

            SetTotal();
            LineItemUpdated?.Invoke(Product.ProductId, quantity);
        }
    }

    private int Minimum
    {
        get
        {
            return Product.StockLevel > 0 ? 1 : 0;
        }
    }

    private string DetailLink
    {
        get => $"product-detail?productId={Product.ProductId}";
    }

    private string ImageSrc
    {
        get => $"/img/{Product.ImageName}";
    }

    //SS 27/3 The total price of this line item
    private decimal LineTotal { get; set; }

    //SS 27/3 Method for calculating and setting the line total property
    private void SetTotal()
    {
        LineTotal = Math.Round(Product.CurrentPrice * Quantity, 2);
    }

    //SS 27/3 Method invoked by the remove button's onclick delegate
    private void RemoveItem()
    {
        LineItemUpdated?.Invoke(Product.ProductId, 0);
    }

}
